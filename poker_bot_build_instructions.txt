POKER‑BOT BUILD INSTRUCTIONS
==============================

Part A  — High‑Level Road‑Map
-----------------------------
1. **Environment + Abstraction**  
   *Create a 3‑player No‑Limit Hold’em simulator with discrete bet sizes (½‑pot, pot, all‑in). This gives us a tractable game tree for Deep CFR.*

2. **Deep CFR Blueprint (Game‑Theory Core)**  
   *Run external‑sampling Monte‑Carlo CFR. Neural networks (Transformers) replace tabular regrets, producing an approximate equilibrium “blueprint” strategy.*

3. **Reinforcement‑Learning Fine‑Tune**  
   *Convert the Transformer to an Actor‑Critic head and continue training with PPO self‑play. KL‑regularise toward the blueprint so we keep robustness but gain exploitability.*

4. **Evaluation & Scaling**  
   *Benchmark win‑rate vs. heuristic bots and earlier snapshots. Once solid at 3‑max, repeat with 6‑max or richer bet sets.*

----------------------------------------------------------------
Part B  — Granular Step‑By‑Step (with File Targets)
----------------------------------------------------------------

| Step | Goal | Code Files to Author/Edit (*bold = new*) |
|------|------|------------------------------------------|
|0.1|Project scaffold & editable install|`pyproject.toml`, `.gitignore`, `README.md`|
|0.2|Global config system|`configs/envs/holdem_3p.yaml`, `configs/deep_cfr/default.yaml`, `configs/ppo/default.yaml`|
|0.3|Utility seeding & logging|`poker_ai/utils/seed.py`, `poker_ai/utils/logger.py`|

### Stage 1  Environment (holdem_wrapper)
| # | Task | Files |
|---|------|-------|
|1.1|Wrap PettingZoo 3‑player env; discrete bet set|**`poker_ai/envs/holdem_wrapper.py`**|
|1.2|Write smoke‑test CLI|`scripts/00_env_smoke.py`|
|1.3|Unit test: legal moves & chip conservation|`poker_ai/envs/tests/test_env.py`|

### Stage 2  Card & Token Helpers
| # | Task | Files |
|---|------|-------|
|3.1|Card index & bucket util|**`poker_ai/encoders/card_utils.py`**|
|3.2|Tests: deterministic mapping|`poker_ai/encoders/tests/test_card_utils.py`|

### Stage 3  Information‑Set Transformer
| # | Task | Files |
|---|------|-------|
|4.1|Tokeniser: build action & card tokens|inside **`info_set_transformer.py`**|
|4.2|Implement 4‑layer encoder + two heads (advantage, policy)|same file|
|4.3|Unit: forward shape & runtime|`poker_ai/encoders/tests/test_encoder.py`|

### Stage 4  Reservoir Memory
| # | Task | Files |
|---|------|-------|
|5.1|O(1) reservoir buffer class|**`poker_ai/memory/reservoir.py`**|
|5.2|χ² uniformity test|`poker_ai/memory/tests/test_reservoir.py`|

### Stage 5  Deep CFR Solver
| # | Task | Files |
|---|------|-------|
|6.1|External‑sampling traversal + advantage storage|**`poker_ai/solvers/deep_cfr/trainer.py`**|
|6.2|Average strategy merger|same file|
|6.3|Regret convergence test on Leduc|`poker_ai/solvers/deep_cfr/tests/test_traversal.py`|
|6.4|Blueprint evaluator|**`poker_ai/solvers/deep_cfr/evaluator.py`**|

CLI: `scripts/10_run_deep_cfr.py`

### Stage 6  Agents Layer
| # | Task | Files |
|---|------|-------|
|7.1|Abstract Agent API|`poker_ai/agents/base_agent.py`|
|7.2|Random baseline|`poker_ai/agents/random_agent.py`|
|7.3|CFR agent (policy net wrapper)|**`poker_ai/agents/cfr_agent.py`**|
|7.4|Unit tests on action legality|`poker_ai/agents/tests/test_agents.py`|

### Stage 7  Blueprint Evaluation
| # | Task | Files |
|---|------|-------|
|8.1|Heuristic rule‑based bots for benchmarking|`poker_ai/agents/heuristic_agent.py` (optional)|
|8.2|Eval script|`scripts/20_eval_blueprint.py`|

### Stage 8  RL Fine‑Tune
| # | Task | Files |
|---|------|-------|
|9.1|Actor‑Critic Transformer (value head)|**`poker_ai/agents/rl_agent.py`**|
|9.2|Weight transfer util|`scripts/30_convert_to_rl.py`|
|9.3|PPO self‑play trainer|`scripts/40_train_rl_finetune.py`|
|9.4|Population opponent pool logic|inside trainer script|
|9.5|Integration test on toy env: win‑rate improvement|`agents/tests/test_rl_finetune.py`|

### Stage 9  Final Tournament & Metrics
| # | Task | Files |
|---|------|-------|
|10.1|Round‑robin evaluator script|`scripts/50_eval_final.py`|
|10.2|Outputs CSV & plots into `reports/` (auto‑made)| |

----------------------------------------------------------------
Part C  Which Files to Code First (Recommended Order)
----------------------------------------------------------------
1. **holdem_wrapper.py**  (plus tiny smoke CLI)  
2. **card_utils.py**  (enables encoder)  
3. **info_set_transformer.py**  (stand‑alone forward test)  
4. **reservoir.py** (simple)  
5. **deep_cfr/trainer.py** on Leduc stub  
6. Only after CFR loop converges → agents layer (cfr_agent) & evaluation scripts  
7. PPO conversion scripts  

Each step has an accompanying pytest to lock behaviour before moving on—preventing downstream code from silently breaking earlier assumptions.

